#!/usr/bin/env bun

import path from "node:path";
import fs from "node:fs";

import Bun from "bun";
import esbuild from "esbuild";
import chalk from "chalk";

import { resolveNextPages, transpile } from "src/transpiler";

import pkg from "../package.json" with { type: "json" };

const ROOT = process.cwd();
const PORT = 3000;
const PLUGINS = [
  {
    name: "react-dust",
    setup(build) {
      build.onResolve({ filter: /.*/ }, (arg) => {
        if (["react", "react-dom"].includes(arg.path)) {
          return {
            path: path.join(import.meta.dir, `../src/${arg.path}/index.ts`),
            namespace: "file",
          };
        }
      });
    },
  },
  {
    name: "jsx-transpiler",
    setup(build) {
      build.onLoad({ filter: /\.(j|t)sx$/ }, async (arg) => {
        const jsx = await Bun.file(arg.path).text();
        const contents = transpile(jsx);
        return {
          contents,
          loader: "jsx",
        };
      });
      build.onResolve({ filter: /.*/ }, (arg) => {
        if (arg.path === pkg.name) {
          return {
            path: path.join(import.meta.dir, "../src/index.ts"),
            namespace: "file",
          };
        }
      });
    },
  },
];

const compileNextPages = async (entryPoint) => {
  const nextPages = [];

  await esbuild.build({
    entryPoints: [entryPoint],
    bundle: true,
    write: false,
    plugins: [
      {
        name: "jsx-transpiler",
        setup(build) {
          build.onLoad({ filter: /\.(j|t)sx$/ }, async (arg) => {
            const jsx = await Bun.file(arg.path).text();
            const { contents, nextPages: pages } = resolveNextPages(jsx);
            pages.forEach((dir) =>
              nextPages.push(
                dir.match(/^\./)
                  ? path.resolve(arg.path, "..", dir).replace(`${ROOT}/`, "")
                  : dir,
              ),
            );
            return {
              contents,
              loader: "jsx",
            };
          });
          build.onResolve({ filter: /.*/ }, (arg) => {
            if (arg.path === pkg.name) {
              return {
                path: path.join(import.meta.dir, "../src/index.ts"),
                namespace: "file",
              };
            }
          });
        },
      },
    ],
  });

  const glob = new Bun.Glob("**/*.{js,jsx,ts,tsx}");
  const pages = nextPages.flatMap((pages) =>
    Array.from(glob.scanSync(`${ROOT}/${pages}`)).map(
      (file) => `${pages}>${file}`,
    ),
  );

  const jsFile = "/tmp/dust-nextjs-pages.js";

  Bun.write(
    jsFile,
    `
      import { registerRoutes } from 'dust';
      import * as entryPoint from '${entryPoint}';
      ${pages.map((page, index) => `import Page${index + 1} from '${ROOT}/${page.replace(">", "/")}';`).join("\n")}
      const pages = {
        ${pages.map(
          (page, index) =>
            `'/${page
              .split(">")[1]
              .replace(/\..*?$/, "")
              .replace(/\bindex$/, "")}': Page${index + 1}`,
        )}
      };
      registerRoutes(pages);
    `,
  );

  return jsFile;
};

const build = async () => {
  const index = await Bun.file(`${ROOT}/index.html`).text();
  const source = index.match(/script src=['"](.*\.(j|t)sx)['"]/)[1];

  const entryPoint = path.join(ROOT, source);
  const file = path.basename(source).replace(/\.(j|t)sx/, ".js");

  const build = await esbuild.build({
    entryPoints: [await compileNextPages(entryPoint)],
    bundle: true,
    write: false,
    minify: true,
    plugins: PLUGINS,
  });

  await Bun.write(
    path.join(ROOT, "dist", file),
    build.outputFiles[0].text.replaceAll('"use strict";', ""),
  );

  await Bun.write(`${ROOT}/dist/index.html`, index.replace(source, `/${file}`));
  await Bun.write(`${ROOT}/dist/sw.js`, "function SW() {}");
};

const dev = () => {
  const handler = async (req) => {
    const url = new URL(req.url);
    const pathname = url.pathname.replaceAll("..", "");

    if (pathname === "/sw.js") {
      const content = "function SW() {}";
      return new Response(content, {
        headers: { "Content-Type": "application/javascript" },
      });
    }

    if (pathname.match(/\.(j|t)sx?$/)) {
      try {
        const entryPoint = path.join(ROOT, pathname);
        const build = await esbuild.build({
          entryPoints: [await compileNextPages(entryPoint)],
          bundle: true,
          write: false,
          plugins: PLUGINS,
        });

        if (build.outputFiles?.length) {
          const content = build.outputFiles[0].text.replaceAll(
            '"use strict";',
            "",
          );

          return new Response(content, {
            headers: { "Content-Type": "application/javascript" },
          });
        }
      } catch (error) {
        console.error(`Error serving file ${pathname}:`, error);
        return new Response("Error processing file", { status: 500 });
      }
    }

    let file = path.join(ROOT, pathname);
    if (!fs.existsSync(file)) {
      file += "/index.html";
    }

    const stats = fs.existsSync(file) && fs.statSync(file);
    if (stats && stats.isFile?.()) {
      const contentType = getContentType(file);
      const content =
        await Bun.file(file)[
          contentType === "application/octet-stream" ? "bytes" : "text"
        ]();
      return new Response(content, {
        status: 200,
        headers: { "Content-Type": getContentType(file) },
      });
    }

    const content = await Bun.file(path.join(ROOT, "index.html")).text();
    return new Response(content, {
      headers: { "Content-Type": "text/html" },
    });
  };

  const server = Bun.serve({
    port: PORT,
    fetch: handler,
  });

  console.log(`
  ${chalk.cyan(pkg.name.replace(/^./, (m) => m.toUpperCase()))} ${chalk.green(`v${pkg.version}`)} ${chalk.gray("- DEV")}
  ${chalk.gray("at")} http://localhost:${server.port}/
`);

  process.once("SIGINT", () => server.stop());
  process.once("SIGTERM", () => server.stop());
};

const preview = () => {
  const server = Bun.serve({
    port: PORT,
    async fetch(req) {
      const url = new URL(req.url);
      const pathname = url.pathname.replaceAll("..", "");

      const file = path.join(ROOT, "dist", pathname);
      const stats = fs.existsSync(file) && fs.statSync(file);

      if (stats && stats.isFile?.()) {
        const contentType = getContentType(file);
        const content =
          await Bun.file(file)[
            contentType === "application/octet-stream" ? "bytes" : "text"
          ]();
        return new Response(content, {
          status: 200,
          headers: { "Content-Type": contentType },
        });
      }

      const content = await Bun.file(
        path.join(ROOT, "dist", "index.html"),
      ).text();
      return new Response(content, {
        headers: { "Content-Type": "text/html" },
      });
    },
    error() {
      return new Response(null, { status: 404 });
    },
  });

  console.log(`
    ${chalk.cyan(pkg.name.replace(/^./, (m) => m.toUpperCase()))} ${chalk.green(`v${pkg.version}`)} ${chalk.gray("- PREVIEW")}
    ${chalk.gray("at")} http://localhost:${server.port}/
  `);

  process.once("SIGINT", () => server.stop());
  process.once("SIGTERM", () => server.stop());
};

const getContentType = (file) => {
  if (file.endsWith(".html")) return "text/html";
  if (file.endsWith(".css")) return "text/css";
  if (file.endsWith(".js")) return "application/javascript";
  return "application/octet-stream";
};

const index = Bun.argv.indexOf(import.meta.filename);
const [cmd, ...args] = Bun.argv.slice(index + 1);

switch (cmd || "dev") {
  case "build":
    build(...args);
    break;
  case "dev":
    dev(...args);
    break;
  case "preview":
    preview(...args);
    break;
  default:
    console.log(`Unknown command: ${cmd}`);
}
